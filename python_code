import cv2
import torch
import numpy as np
from collections import deque

# Load YOLO model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')
TARGET_CLASSES = [2, 3, 5, 7]

# Initialize tracking data
object_tracks = {}
max_frames = 10

def get_centroid(x1, y1, x2, y2):
    return int((x1 + x2) / 2), int((y1 + y2) / 2)

def calculate_distance(p1, p2):
    return np.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

# Open video feed
cap = cv2.VideoCapture('traffic_video.mp4')

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Run YOLOv5 on the current frame
    results = model(frame)
    detections = results.xyxy[0].cpu().numpy()
    filtered_detections = [det for det in detections if int(det[5]) in TARGET_CLASSES]

    # Update object tracks
    for det in filtered_detections:
        x1, y1, x2, y2, conf, cls = det
        centroid = get_centroid(x1, y1, x2, y2)
        obj_id = hash((x1, y1, x2, y2))
        if obj_id not in object_tracks:
            object_tracks[obj_id] = deque(maxlen=max_frames)
        object_tracks[obj_id].append(centroid)

    # Visualize tracks and detect collisions
    collision_threshold = 50
    for obj_id, track in object_tracks.items():
        for i in range(1, len(track)):
            cv2.line(frame, track[i - 1], track[i], (255, 0, 0), 2)
        for other_id, other_track in object_tracks.items():
            if obj_id != other_id and track and other_track:
                distance = calculate_distance(track[-1], other_track[-1])
                if distance < collision_threshold:
                    print(f"Collision detected between {obj_id} and {other_id}")
                    cv2.circle(frame, track[-1], 10, (0, 0, 255), -1)

    # Display the frame
    cv2.imshow('Accident Detection', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
